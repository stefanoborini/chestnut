#!/usr/bin/env python
# @description Chestnut PackageManager deployer.
# @author Stefano Borini

import sys
import os
import getopt
import shutil
from xml.dom import minidom

script_path=os.path.abspath(sys.path[0]); sys.path.append(os.path.abspath(os.path.join(script_path, "../lib/python")));

def usage():
    print "Chestnut Package Manager deployer"
    print "By Stefano Borini"
    print ""
    print "Usage: "+os.path.basename(sys.argv[0])+" [-l]"
    print ""
    print "Produces a list of available packages."
    print ""


class PackageDeployer:
    def __init__(self, path, versioned_name):
        self.__long_style=False
        self.__path = path
        self.__versioned_name = versioned_name

    def create(self):
        print "Creating "+self.__versioned_name
        os.mkdir(os.path.join(self.__path, self.__versioned_name+".package"))
        manifest = file(os.path.join(self.__path, self.__versioned_name+".package","manifest.xml"), "w")
        manifest.write("""
<?xml version=\"1.0\" encoding=\"UTF-8\"?>   
<Package xmlns=\"urn:uuid:d195be0c-200a-40a4-9d05-35fdf42eb29f\" version=\"1.0.0\"> 
    <Contents> 
    </Contents> 
</Package> 
""")



        manifest.close()

    def store(self, fs_path, pkg_path):
        # forbid .. in pkg_path
        try:
            os.mkdir(os.path.join(self.__path,self.__versioned_name+".package",pkg_path))
        except:
            pass
        shutil.copy(fs_path, os.path.join(self.__path,self.__versioned_name+".package",pkg_path))
#    def add(self, type, platform, entry_point, path, object):
#        if type == "executable":
#            document = minidom.parse(os.path.join(path,"manifest.xml"))
#            contents = document.getElementsByTagName("Contents")[0]
#            groups = contents.getElementsByTagName("ExecutableGroup")
#            found = False
#            for executable_group in groups:
#                if executable_group.getAttribute("entryPoint") == entry_point:
#                    executable_group.appendChild(_executable(platform, object))
#                    found = True
#            
#            if not found:
#                executable_group = document.createElement("ExecutableGroup") 
#                executable_group.setAttribute("entryPoint", entry_point)
#                executable_group.appendChild(_executable(platform, object))
#                contents.appendChild(executable_group)
#            
#            f=file(os.path.join(path,"manifest.xml"))
#            document.writexml(f)
#            f.close()
#            shutil.copy(object, os.path.join(path,"Executables", platform, object))
#        elif:
#            raise Exception("Unsupported types") 
#            
#            
#            
#


    
if __name__ == "__main__":
    options, args=getopt.getopt(sys.argv[1:], "csf:p:h", ["create","store","fs_path=","pkg_path=","help"])

    do_create = False
    print options
    for opt in options:
        if opt[0] == "-c" or opt[0] == "--create":
            do_create = True
        if opt[0] == "-s" or opt[0] == "--store":
            do_store = True
        if opt[0] == "-f" or opt[0] == "--fs_path":
            fs_path=opt[1]
        if opt[0] == "-p" or opt[0] == "--pkg_path":
            pkg_path=opt[1]
        if opt[0] == "-h" or opt[0] == "--help":
            usage()
            sys.exit(0)

    deployer = PackageDeployer(os.getcwd(), args[0])

    if do_create is True:
        deployer.create()

    if do_store is True:
        deployer.store(fs_path, pkg_path)

# cg_deploypkg --store --fs_path=x --pkg_path=x foo-1.0.0
# cg_deploypkg --annotate --type=res --path_type=package_relative --path=x --platform=foo --interpreter=x --description="" --entry_point=x foo-1.0.0
# cg_deploypkg --annotate --type=exe --path_type=package_relative --path=x --platform=foo --interpreter=x --description="" --entry_point=x --default foo-1.0.0
# cg_deploypkg --annotate --type=package --description=""  foo-1.0.0

# cg_deploypkg --import --type=exe --fs_path=x --entry_point=foox --platform=bla --interpreter=python
# cg_deploypkg --import --type=res --fs_path=x --entry_point=fooxres --platform=bla --interpreter=python
