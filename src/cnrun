#!/usr/bin/env python
# @description Runs chestnut packages from the command line
# @author Stefano Borini 

import sys
import os

script_path=os.path.abspath(sys.path[0]); sys.path.append(os.path.abspath(os.path.join(script_path, "../lib/python")));

from Chestnut import PackageResolver

from Chestnut import Utils

def usage():
    print "Chestnut Package Manager (version 2.1.0)"
    print "By Stefano Borini"
    print ""
    print "Usage: "+os.path.basename(sys.argv[0])+" PackageName[-version][/entryPoint]"
    print ""
    print "Run the package default entry point, or a specific entry point as specified."
    print "Examples:"
    print os.path.basename(sys.argv[0])+" PackageName"
    print os.path.basename(sys.argv[0])+" PackageName/entryPoint"
    print os.path.basename(sys.argv[0])+" PackageName-1.0.0"
    print os.path.basename(sys.argv[0])+" PackageName-1.0.0/entryPoint"


class Runner:
    def __init__(self):
        pass
    def run(self, qualified_name, arguments):
        try:
            package_name, version, entry_point = Utils.qualifiedNameComponents(qualified_name)
        except:
            # try to run it as an ordinary program
            try:
                os.execvpe(qualified_name,[qualified_name, ]+arguments, os.environ)
            except OSError:
                print qualified_name+" : not found"
                sys.exit(127)

        resolver = PackageResolver.PackageResolver()
        package = resolver.find(package_name, version)

        if package is not None:
            if package.isDeprecated():
                sys.stderr.write("WARNING: package "+qualified_name+" is marked as deprecated : "+package.deprecationMessage()+"\n")

            if entry_point is None or len(entry_point.strip()) == 0:
                entry_point = package.defaultExecutableGroupEntryPoint()

            if package.isExecutableDeprecated(entry_point):
                sys.stderr.write("WARNING: entry point "+qualified_name+" is marked as deprecated : "+package.executableDeprecationMessage(entry_point)+"\n")

            package.runEntryPoint(entry_point, arguments, os.environ)

        else :
            try:
                os.execvpe(qualified_name,[qualified_name, ]+arguments, os.environ)
            except OSError:
                print qualified_name+" : not found"
                sys.exit(127)
                
if len(sys.argv) < 2:
    usage()
    sys.exit(0)

if __name__ == "__main__":
    runner=Runner()
    runner.run(sys.argv[1], sys.argv[2:])
